{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/mahdieh/lighthouse/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import{useState,useEffect}from\"react\";export function getDate(iso){return new Date(Date.parse(iso)).toDateString().substr(4);}export function getTime(iso){return new Date(Date.parse(iso)).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'});}export function group(activityData){var result=activityData.reduce(function(groups,item){var date=item.created_at.split('T')[0];if(!groups[date]){groups[date]=[];}groups[date].push(item);return groups;},[]);return result;}export function toggle(activityData,id){var _iterator=_createForOfIteratorHelper(activityData),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var item=_step.value;if(item.id==id){item.is_archived=!item.is_archived;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return activityData;}// export function archivedHandler(index) {\n//    const [archived, setArchived] = useState(false);\n//    const newArchived = [...archived];\n//    console.log('+++++++',newArchived)\n//    newArchived[index].is_archived =! newArchived[index].is_archived;\n//    setArchived(newArchived)\n// const updatedCall = {...selectedCall, is_archived: !item.is_archived };\n// setArchived(prev =>({\n//     ...prev,\n//     updatedCall\n// }))\n// setArchived(activityData && activityData.map(item => {\n//     if (item.id === archived.id) {\n//         return {\n//              ...item,is_archived: !item.is_archived \n//         } \n//     }\n//     return item\n// }))\n//    const selectedCall = activityData.find(call => call.id === id);\n//    selectedCall.is_archived = !selectedCall.is_archived\n//    return selectedCall\n// }","map":{"version":3,"sources":["/Users/mahdieh/lighthouse/Technical test/aircall/src/helper.js"],"names":["useState","useEffect","getDate","iso","Date","parse","toDateString","substr","getTime","toLocaleTimeString","hour","minute","group","activityData","result","reduce","groups","item","date","created_at","split","push","toggle","id","is_archived"],"mappings":"uIAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA,MAAO,SAASC,CAAAA,OAAT,CAAiBC,GAAjB,CAAqB,CACxB,MAAO,IAAIC,CAAAA,IAAJ,CAASA,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAT,EAA0BG,YAA1B,GAAyCC,MAAzC,CAAgD,CAAhD,CAAP,CACH,CACD,MAAO,SAASC,CAAAA,OAAT,CAAiBL,GAAjB,CAAqB,CACxB,MAAO,IAAIC,CAAAA,IAAJ,CAASA,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAT,EAA0BM,kBAA1B,CAA6C,EAA7C,CAAiD,CAACC,IAAI,CAAE,SAAP,CAAkBC,MAAM,CAAC,SAAzB,CAAjD,CAAP,CACH,CAED,MAAO,SAASC,CAAAA,KAAT,CAAeC,YAAf,CAA4B,CAC/B,GAAMC,CAAAA,MAAM,CAAGD,YAAY,CAACE,MAAb,CAAoB,SAACC,MAAD,CAAQC,IAAR,CAAiB,CAC5C,GAAMC,CAAAA,IAAI,CAAGD,IAAI,CAACE,UAAL,CAAgBC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAb,CACA,GAAI,CAACJ,MAAM,CAACE,IAAD,CAAX,CAAmB,CACfF,MAAM,CAACE,IAAD,CAAN,CAAe,EAAf,CACH,CACDF,MAAM,CAACE,IAAD,CAAN,CAAaG,IAAb,CAAkBJ,IAAlB,EACA,MAAOD,CAAAA,MAAP,CACH,CAPU,CAOR,EAPQ,CAAf,CAQI,MAAOF,CAAAA,MAAP,CACP,CAED,MAAO,SAASQ,CAAAA,MAAT,CAAiBT,YAAjB,CAA8BU,EAA9B,CAAiC,0CACjBV,YADiB,YACpC,+CAAgC,IAArBI,CAAAA,IAAqB,aAC5B,GAAIA,IAAI,CAACM,EAAL,EAAWA,EAAf,CAAkB,CACdN,IAAI,CAACO,WAAL,CAAkB,CAAEP,IAAI,CAACO,WAAzB,CACH,CACJ,CALmC,qDAMpC,MAAOX,CAAAA,YAAP,CACH,CAED;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEJ;AACA;AACA;AACA","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport function getDate(iso){\n    return new Date(Date.parse(iso)).toDateString().substr(4)\n}\nexport function getTime(iso){\n    return new Date(Date.parse(iso)).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})\n}\n\nexport function group(activityData){\n    const result = activityData.reduce((groups,item) => {\n            const date = item.created_at.split('T')[0];\n            if (!groups[date]) {\n                groups[date] = [];\n            }\n            groups[date].push(item);\n            return groups;\n        }, [])\n        return result;\n}\n\nexport function toggle (activityData,id){   \n    for (const item of activityData){\n        if (item.id == id){\n            item.is_archived =! item.is_archived\n        }\n    }\n    return activityData \n} \n\n// export function archivedHandler(index) {\n//    const [archived, setArchived] = useState(false);\n//    const newArchived = [...archived];\n//    console.log('+++++++',newArchived)\n//    newArchived[index].is_archived =! newArchived[index].is_archived;\n//    setArchived(newArchived)\n    // const updatedCall = {...selectedCall, is_archived: !item.is_archived };\n    // setArchived(prev =>({\n    //     ...prev,\n    //     updatedCall\n    // }))\n    // setArchived(activityData && activityData.map(item => {\n    //     if (item.id === archived.id) {\n    //         return {\n               \n    //              ...item,is_archived: !item.is_archived \n    //         } \n    //     }\n    //     return item\n    // }))\n\n//    const selectedCall = activityData.find(call => call.id === id);\n//    selectedCall.is_archived = !selectedCall.is_archived\n//    return selectedCall\n// }"]},"metadata":{},"sourceType":"module"}